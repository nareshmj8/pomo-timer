// Mocks generated by Mockito 5.4.5 from annotations
// in pomodoro_timemaster/test/services/icloud_sync_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:pomodoro_timemaster/services/cloudkit_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake
    implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CloudKitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudKitService extends _i2.Mock implements _i3.CloudKitService {
  MockCloudKitService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(
            Invocation.getter(#navigatorKey),
            returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
              this,
              Invocation.getter(#navigatorKey),
            ),
          )
          as _i1.GlobalKey<_i1.NavigatorState>);

  @override
  bool get isAvailable =>
      (super.noSuchMethod(Invocation.getter(#isAvailable), returnValue: false)
          as bool);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get isOnline =>
      (super.noSuchMethod(Invocation.getter(#isOnline), returnValue: false)
          as bool);

  @override
  _i4.Stream<bool> get availabilityStream =>
      (super.noSuchMethod(
            Invocation.getter(#availabilityStream),
            returnValue: _i4.Stream<bool>.empty(),
          )
          as _i4.Stream<bool>);

  @override
  _i4.Stream<void> get dataChangedStream =>
      (super.noSuchMethod(
            Invocation.getter(#dataChangedStream),
            returnValue: _i4.Stream<void>.empty(),
          )
          as _i4.Stream<void>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> saveData(
    String? recordType,
    String? recordId,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveData, [recordType, recordId, data]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>?> fetchData(
    String? recordType,
    String? recordId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchData, [recordType, recordId]),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);

  @override
  void addPendingOperationForTest(Map<String, dynamic>? data) =>
      super.noSuchMethod(
        Invocation.method(#addPendingOperationForTest, [data]),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> processPendingOperations() =>
      (super.noSuchMethod(
            Invocation.method(#processPendingOperations, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> isICloudAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isICloudAvailable, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> subscribeToChanges() =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToChanges, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void updateAvailability(bool? available) => super.noSuchMethod(
    Invocation.method(#updateAvailability, [available]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> openAppSettings() =>
      (super.noSuchMethod(
            Invocation.method(#openAppSettings, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
